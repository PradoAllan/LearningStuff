######################################
#         Important comments         #
######################################

1- What happens when you run your Kotlin code?
	The IDE compiles your source code into JVM Bytecode (JavaBytecode).
	Assuming your code doesn't have any errors, compiling creates a new Class file
	that can run in a JVM (Java Virtual Machine).
	For example: If you compile the Main.kt code, the compiler will give to you a
	MainKt.class

2- The IDE starts the JVM and runs the MainKt.class
    The JVM translates the .class bytecode into something the underlying platform
    understand, the runs it.

   3- I guess that, for some reason, the IDE doesn't like the declarations of
   variables or functions using '_' to separate words. It has to be in camelCase.
   ex:
        Wrong way:
            val array_strings = arrayOf("test", "test2")
            fun show_strings (s: Array<String>){ }
        Correct way:
            val arrayStrings = arrayOf("test", "test2")
            fun showStrings (s: Array<String>){ }

4- This variable declarations is not good because of the type inference:
        var i: Int = 0 -> this is a good practice in some other languages
        in kotlin:
        var i = 0 -> the type inference knows that the 'i' variable is type Int

5- When you define a variable, you can do that with 'var' or 'val'.
But, there is a difference between them:
    var -> Is used to declare a variable that its value can change during the execution.
    val -> Is used to declare a value that will stay the same.
    example:
    var i = 0
    val pi = 3,14

6- Difference between 'print()' and 'println()'
    Basically, both of them show the output in the STD_OUT.
    But, the main difference is that, print() just print in the fd 1
    without the new line '\n'. And the println() do the same, but with
    the new line '\n' in the end of the output.

7- We can pass some parameters to the main func, called 'argv' by doing this:
    -> click o the ... on the right top of the IDE, (the right side of the debug option)
    -> Run with parameters
    -> Than type the params you want to pass in the box: 'Program arguments'

8- You can write if expressions, like that:
    When you write if expressions you must include an else clause!
    if expression:
            println(if ((i % 2) == 0) "The number ${array[i]} is even" else "The number ${array[i]} is odd")
    normal if condition:
            if ((i % 2) == 0)
                "The number ${array[i]} is even"
            else
                "The number ${array[i]} is odd"

9- Kotlin REPL:
    "Read Evaluate Print Loop"
    Basically is a prompt that reads a kotlin code and execute it
    You can test that in:
    -> Tools
    -> Kotlin
    -> kotlin REPL (experimental)
